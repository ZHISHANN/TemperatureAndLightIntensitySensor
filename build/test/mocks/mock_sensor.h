/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SENSOR_H
#define _MOCK_SENSOR_H

#include "sensor.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#pragma GCC diagnostic push
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_sensor_Init(void);
void mock_sensor_Destroy(void);
void mock_sensor_Verify(void);




#define getRegisterState_IgnoreAndReturn(cmock_retval) getRegisterState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void getRegisterState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, register_state cmock_to_return);
#define getRegisterState_ExpectAndReturn(cmock_retval) getRegisterState_CMockExpectAndReturn(__LINE__, cmock_retval)
void getRegisterState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, register_state cmock_to_return);
typedef register_state (* CMOCK_getRegisterState_CALLBACK)(int cmock_num_calls);
void getRegisterState_StubWithCallback(CMOCK_getRegisterState_CALLBACK Callback);
#define getReadWriteState_IgnoreAndReturn(cmock_retval) getReadWriteState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void getReadWriteState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, readWrite_state cmock_to_return);
#define getReadWriteState_ExpectAndReturn(cmock_retval) getReadWriteState_CMockExpectAndReturn(__LINE__, cmock_retval)
void getReadWriteState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, readWrite_state cmock_to_return);
typedef readWrite_state (* CMOCK_getReadWriteState_CALLBACK)(int cmock_num_calls);
void getReadWriteState_StubWithCallback(CMOCK_getReadWriteState_CALLBACK Callback);
#define write8BitData_IgnoreAndReturn(cmock_retval) write8BitData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void write8BitData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define write8BitData_ExpectAndReturn(data, cmock_retval) write8BitData_CMockExpectAndReturn(__LINE__, data, cmock_retval)
void write8BitData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t data, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_write8BitData_CALLBACK)(uint8_t data, int cmock_num_calls);
void write8BitData_StubWithCallback(CMOCK_write8BitData_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#pragma GCC diagnostic pop
#endif

#endif
